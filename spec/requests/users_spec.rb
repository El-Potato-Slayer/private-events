require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { name: 'Test User', email: 'test@test.com' }
  end

  let(:invalid_attributes) do
    { test: 111, test2: 'test@test.com', test3: 'Hello' }
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create! valid_attributes
      get user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /signup' do
    it 'renders a successful response' do
      get new_user_url
      expect(response).to be_successful
    end
  end

  context 'with valid parameters' do
    it 'create a new User' do
      expect do
        post users_url, params: { user: valid_attributes }
      end.to change(User, :count).by(1)
    end
  end

  context 'with invalid parameters' do
    it 'does not create a new User' do
      expect do
        post users_url, params: { user: invalid_attributes }
      end.to change(User, :count).by(0)
    end
  end
end
